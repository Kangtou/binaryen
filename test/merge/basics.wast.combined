(module
  (type $FUNCSIG$v (func))
  (type $FUNCSIG$v$0 (func))
  (import "env" "memoryBase" (global $memoryBase i32))
  (import "env" "tableBase" (global $tableBase i32))
  (import "env" "memory" (memory $0 256))
  (import "env" "table" (table 0 anyfunc))
  (import "env" "some-func" (func $some-func))
  (import "env" "some-collide" (func $some-collide))
  (import "env" "memoryBase" (global $memoryBase$0 i32))
  (import "env" "tableBase" (global $tableBase$0 i32))
  (import "env" "memory" (memory $0 256))
  (import "env" "table" (table 0 anyfunc))
  (import "env" "some-func-b" (func $some-func-b))
  (import "env" "some-collide" (func $some-collide$0))
  (data (get_global $memoryBase) "hello, A!\n\00\00\00\00\00\00hello, B!\n")
  (func $only-a (type $FUNCSIG$v)
    (drop
      (i32.const 100)
    )
    (call $only-a)
    (call $some-func)
    (call $some-collide)
  )
  (func $willCollide (type $FUNCSIG$v)
    (drop
      (i32.const 200)
    )
    (call $willCollide)
  )
  (func $only-b (type $FUNCSIG$v$0)
    (drop
      (i32.const 111)
    )
    (call $only-b)
    (call $some-func-b)
    (call $some-collide$0)
  )
  (func $willCollide$0 (type $FUNCSIG$v$0)
    (drop
      (i32.const 222)
    )
    (call $willCollide$0)
  )
)
